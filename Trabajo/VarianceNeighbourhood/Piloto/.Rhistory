b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
vecinos = vector()
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,s)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son los que aportan ese coeficiente 
for (k in seq(1, length(vecinos),1)){
W[vecinos[k],i] = w[k]
}
}
i = 1
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
vecinos = vector()
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,s)
}
}
E = rep(1,length(vecinos))
A
adjMatrixFull[1,]
length(A[1,])
length(A[,1])
ww = lsei(A, b, E, f)
E
E = rep(1,length(vecinos))
E
vecinos 
a = c(1,2)
b = c(a,3)
b
a = vector()
b=(a,1)
b=c(a,1)
b
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,s)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son los que aportan ese coeficiente 
for (k in seq(1, length(vecinos),1)){
W[vecinos[k],i] = w[k]
}
f = 1
samples = length(matrixFinal[1,])
W = matrix(nrow = samples, ncol= samples)
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,s)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son los que aportan ese coeficiente 
for (k in seq(1, length(vecinos),1)){
W[vecinos[k],i] = w[k]
}
}
length(W[1,])
length(W[,1])
W
W = zeros(nrow = samples, ncol= samples)
W = matrix(0L, nrow = samples, ncol= samples)
W
samples = length(matrixFinal[1,])
W = matrix(0L, nrow = samples, ncol= samples)
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,s)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son los que aportan ese coeficiente 
for (k in seq(1, length(vecinos),1)){
W[vecinos[k],i] = w[k]
}
}
W
W[1,]
W = matrix(0L, nrow = samples, ncol= samples)
W
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,s)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son los que aportan ese coeficiente 
for (k in seq(1, length(vecinos),1)){
W[vecinos[k],i] = w[k]
}
}
W[1,]
W[,1]
W = matrix(0L, nrow = samples, ncol= samples)
i = 1
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,s)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son los que aportan ese coeficiente 
for (k in seq(1, length(vecinos),1)){
W[vecinos[k],i] = w[k]
}
W[1,]
W[,,]
W[,1]
vecinos
W = matrix(0L, nrow = samples, ncol= samples)
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,j)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son los que aportan ese coeficiente 
for (k in seq(1, length(vecinos),1)){
W[vecinos[k],i] = w[k]
}
W[1,]
W[,1]
W = matrix(0L, nrow = samples, ncol= samples)
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,j)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son los que aportan ese coeficiente 
for (k in seq(1, length(vecinos),1)){
W[vecinos[k],i] = w[k]
}
}
W
W[,1]
W[,2]
W[,20]
adjMatrixFull[,20]
i =  20
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,j)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son 
w
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,j)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=length(vecinos))
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vec
w 
samples = length(matrixFinal[1,])
W = matrix(0L, nrow = samples, ncol= samples)
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,j)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=length(vecinos))
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son los que aportan ese coeficiente 
for (k in seq(1, length(vecinos),1)){
W[vecinos[k],i] = w[k]
}
}
W[20,]
W[20,22]
W[22,20]
W[,20]
W[,22]
1/W[22,20]
W[,22]
W[,22]
W[,20]
sum(c(1,2))
sum(W[,20])
sum(W[20,])
i = 20
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,j)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=length(vecinos))
#ahora tengo que pone
w 
vecinos
i = 22
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,j)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=length(vecinos))
#ahora tengo que pones esos coeficientes donde corresponde 
#y
w
vecinos
I = id(samples)
I = diag(samples)
M = t(I - W)%*%W
M = t(I - W)%*%(I -W)
eigen = eigen(M)
eigenValues = eigen$values
eigenValues 
W = matrix(0L, nrow = samples, ncol= samples)
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
vecinos = vector()
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrixFull[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
vecinos = c(vecinos,j)
}
}
E = rep(1,length(vecinos))
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=length(vecinos))
#ahora tengo que pones esos coeficientes donde corresponde 
#y en los otros lugares donde los vecinos no aportan poner 0
#vector vecinos me dice cuales son los que aportan ese coeficiente 
for (k in seq(1, length(vecinos),1)){
W[i,vecinos[k]] = w[k]
}
}
I = diag(samples)
M = t(I - W)%*%(I -W)
#ahora tengo que diagonalizarla 
eigen = eigen(M)
eigenValues = eigen$values
eigenValues 
a = c(1,3,2,5)
rank(a)
eigenValues 
rangoValues = rank(eigenValues)
rangoValues 
eigenValuesNoZero = vector()
for (i in seq(1,length(eigenValues),1)){
if (eigenValues[i] != 0){
eigenValuesNoZero = c(eigenValuesNoZero,eigenValues[i])
}
}
L = matrix(nrows=2 ncols=samples)
L = matrix(nrows=2, ncols=samples)
L = matrix(nrow=2, ncol=samples)
eigenValuesNoZero = vector()
eigenVectorsNoZero = vector()
for (i in seq(1,length(eigenValues),1)){
if (eigenValues[i] != 0){
eigenValuesNoZero = c(eigenValuesNoZero,eigenValues[i])
eigenVectorsNoZero = c(eigenVectorsNoZero,eigenVectors[i])
}
}
eigenVectors = eigen$vectors
eigenValuesNoZero = vector()
eigenVectorsNoZero = vector()
for (i in seq(1,length(eigenValues),1)){
if (eigenValues[i] != 0){
eigenValuesNoZero = c(eigenValuesNoZero,eigenValues[i])
eigenVectorsNoZero = c(eigenVectorsNoZero,eigenVectors[i])
}
}
eigenVectorsNoZero[]
L = matrix(nrow=2, ncol=samples)
for (i in seq(1,length(rangoValues),1)){
if (rangoValues[i] == 1){
L[1,] = eigenVectorsNoZero[i]
}
if (rangoValues[i] == 2){
L[2,] = eigenVectorsNoZero[i]
}
}
L[1,]
rangoValues 
eigenVector[81]
eigenVectors[81]
eigenVectors
eigenVectors[,81]
eigenVectors[81,]
A = matrix(c(13, -4, 2, -4, 11, -2, 2, -2, 8), 3, 3, byrow=TRUE)
a = eigen(A)
eigen$values
vect = eigen$vectors
length(A[1,])
length(A[,1])
A = matrix(c(13, -4, 2, -4, 11, -2, 2, -2, 8), 3, 3, byrow=TRUE)
a = eigen(A)
vect = a$vectors
vect[,1]
vect[,2]
vect[,3]
eigen = eigen(M)
eigenValues = eigen$values
eigenVectors = eigen$vectors
eigenVectors[,81]
eigenVectors[,80]
eigenVectors[,79]
eigenValues 
L[2,] = eigenValuesNoZero[,79]
L[2,] = eigenValuesNoZero[,79]
eigenVectors[,81L[1,] = eigenVectorsNoZero[,80]
L[2,] = eigenVectorsNoZero[,79]
eigen = eigen(M)
eigenValues = eigen$values
eigenVectors = eigen$vectors
#armo L la matriz de baja dimensionalidad 
#W es la matriz que en cada fila describe 
#los coeficientes de sus respectivos vecinos. A cada fila es de los coeficientes 
#para la sample de esa fila i esima. 
#ahora L es de 2 * samples y sus filas son los autovectores de menor autovalor 
#primero eliminamos el 0 
eigenValuesNoZero = vector()
eigenVectorsNoZero = vector()
for (i in seq(1,length(eigenValues),1)){
if (eigenValues[i] != 0){
eigenValuesNoZero = c(eigenValuesNoZero,eigenValues[i])
eigenVectorsNoZero = c(eigenVectorsNoZero,eigenVectors[i])
}
}
L[1,] = eigenVectorsNoZero[,80]
eigenVectorsNoZero[,80]
eigenVectorsNoZero 
L[1,] = eigenVectors[,80]
L[2,] = eigenVectors[,79]
L = matrix(nrow = 2, ncol=samples)
L[1,] = eigenVectors[,80]
L[2,] = eigenVectors[,79]
L
L[1,]
L[2,]
samples
distEuclideana = function(vectA, vectB){
  d = sqrt(sum( (vectA - vectB)^2 ))
  d
}
samples = matrix(nrow = samples, ncol = samples) #uso que es simetrica
for (i in seq(1,length(t),1)){
  for (j in seq(1,length(t),1)){
    samples[i,j] = samples[j,i] = distEuclideana(L[,i],L[,j])
  }
}
matrizRangos = t(apply(samples,1,rank))
adyacencia = function(matrizRangos, k){
matrizRangos[matrizRangos <= k] = 1
matrizRangos[matrizRangos > k] = 0
matrizRangos
}
adjMatrix = adyacencia(matrizRangos,4)
adjMatrix[1,]
grafo = graph_from_adjacency_matrix(adjMatrix, mode = c("undirected"), weighted = NULL, diag = FALSE,
  add.colnames = NULL, add.rownames = NA)
plot(grafo, layout = layout_on_sphere(grafo), edge.color = "black", edge.arrow.size=2, edge.width = 2, edge.arrow.width = 2, edge.lty = 1, vertex.size = 10)
plot(grafo, layout =  layout_with_fr(grafo), edge.color = "black", edge.arrow.size=2, edge.width = 2, edge.arrow.width = 2, edge.lty = 1, vertex.size = 10)
plot(grafo, layout =  layout_with_mds(grafo), edge.color = "black", edge.arrow.size=2, edge.width = 2, edge.arrow.width = 2, edge.lty = 1, vertex.size = 10)
plot(grafo, layout =  layout_with_mds(grafo), edge.color = "black", edge.arrow.size=2, edge.width = 2, edge.arrow.width = 2, edge.lty = 1, vertex.size = 30)
plot(grafo, layout =  layout_with_mds(grafo), edge.color = "black", edge.arrow.size=2, edge.width = 2, edge.arrow.width = 2, edge.lty = 1, vertex.size = 20)
plot(grafo, layout =  layout_with_mds(grafo), edge.color = "black", edge.arrow.size=6, edge.width = 2, edge.arrow.width = 2, edge.lty = 1, vertex.size = 20)
plot(grafo, layout =  layout_with_mds(grafo), edge.color = "black", edge.arrow.size=6, edge.width = 6, edge.arrow.width = 6, edge.lty = 1, vertex.size = 20)
png(filename="KNearNeighBajaDim.png", 
    units="in", 
    width=10, 
    height=8, 
    pointsize=12, 
    res=72)
plot(grafo, layout =  layout_with_mds(grafo), edge.color = "black", edge.arrow.size=2, edge.width = 2, edge.arrow.width = 6, edge.lty = 1, vertex.size = 20)
text(1, 1, labels = "std = 3, k=3, low dim d=2",font=2, cex=1.5)
dev.off()
plot(L[1,],L[2,])
grafo = graph_from_adjacency_matrix(adjMatrix, mode = c("undirected"), weighted = NULL, diag = FALSE,
  add.colnames = NULL, add.rownames = NA)
plot(grafo, layout =  layout_with_mds(grafo), edge.color = "black", edge.arrow.size=2, edge.width = 2, edge.arrow.width = 6, edge.lty = 1, vertex.size = 20)
t
plot(t,rainbow(81))
plot(t,col=rainbow(81))
plot(L[1,],L[2,])
plot(col(rainbow(81)))
point(col(rainbow(81)))
points(col(rainbow(81)))
rbPal = colorRampPalette(c('red','blue'))
dat$Col = rbPal(10)[as.numeric(cut(t,breaks = 10))]
datCol = rbPal(10)[as.numeric(cut(t,breaks = 10))]
plot(L[1,],L[2,],pch = 20,col = datCol)
q()
