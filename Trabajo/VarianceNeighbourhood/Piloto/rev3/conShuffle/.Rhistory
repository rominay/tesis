    units="in", 
    width=10, 
    height=8, 
    pointsize=12, 
    res=72)
plot(grafo, layout = layout_on_sphere(grafo), edge.color = "black", edge.arrow.size=2, edge.width = 2, edge.arrow.width = 2, edge.lty = 1, vertex.size = 10)
text(1, 1, labels = "std = 3, k=3",font=2, cex=1.5)
dev.off()
is_connected(grafo)
expMatrix  = matrizFSueve 
diag = matrix(nrow = length(t), ncol = length(t))
for (i in seq(1,length(adjMatrix[1,]),1)){
for (j in seq(1,length(adjMatrix[1,]),1)){
if (i==j){
diag[i,i] = 1
}
if (i != j) {
diag[i,j] = 0
}
}
}
adjMatrixNoSelf = adjMatrix - diag
adjMatrix = adjMatrixNoSelf 
desvStandarCuadrado = function(e){
desvStandr = 0
eMean = mean(e)
#desvStandr = vector()
for (i in  seq(1,(length(e)),1)){
#print(i)
desvStandr = desvStandr + ( eMean - e[i] )^2
}
std = desvStandr
std
}
neighbourhoodVarSTD = function(expMatrix, adjMatrix,g){
t = t = seq(1,81,1)
expres = vector()
js = vector()
is = vector()
S = 0 
std = 0
n = length(expMatrix[1,])
#kc = 2
kc = apply(adjMatrix,1,sum)[1]
#i representa a la sample1,sample2,..
for (i in seq(1 , length(expMatrix[1,]) , 1)){
egi = expMatrix[g,i]
#quiero sumar sobre los tiempos vecinos..
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
#ese j es el tiempo que me interesa
egj = expMatrix[g,j]
#print(j)
js = c(js,j)
is = c(is,i)
expres = c(expres,egi) 
S = S + ((egi - egj)^2)
}
}
}
SN = S/(n*kc-1)
std = desvStandarCuadrado(expMatrix[g,])/length(expMatrix[1,])
c(SN,std)
#info = matrix(nrow = length(js), ncol = 3)
#info[,1] = expres
#info[,2] = is
#info[,3] = js
#info
}
#a la matriz de adyacencia debo hacerla simetrica 
adjMatrix = adjMatrix + t(adjMatrix)
devSTD2 = matrix(nrow = length(expMatrix[,1]), ncol = 2)
for (g in seq(1,length(expMatrix[,1]),1)){
devSTD2[g,] = neighbourhoodVarSTD(expMatrix, adjMatrix,g)
}
genesSi = 0
for (i in genes){
if (devSTD2[,1][i] < devSTD2[,2][i]){
genesSi = genesSi + 1
}
}
genesSi 
png(filename="NeighbourhoodConShuffleAdjMatrixCompletaSI.png", 
    units="in", 
    width=10, 
    height=8, 
    pointsize=12, 
    res=72)
#png(filename="pruebar4.png", res=300)
plot(genes,devSTD2[,1], pch="*", cex=2, col="black", xlab="Genes", ylab="", ylim = c(0,70), xlim = c(0,100),cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
points(genes,devSTD2[,2],col="red", pch="o", cex=2)
# Adding a legend inside box at the location (2,40) in graph coordinates.
# Note that the order of plots are maintained in the vectors of attributes.
legend(1,70,legend=c("Varianza vecinos","std"), col=c("black","red"),pch=c("*","o"), cex=1.5,box.lty = 2)
text(80, 70, labels = "std = 3, kc=1, 90/100 genes", font=2, cex=1.5)
dev.off()
png(filename="NeighbourhoodConShuffleAdjMatrixCompletaSI.png", 
    units="in", 
    width=10, 
    height=8, 
    pointsize=12, 
    res=72)
#png(filename="pruebar4.png", res=300)
plot(genes,devSTD2[,1], pch="*", cex=2, col="black", xlab="Genes", ylab="", ylim = c(0,70), xlim = c(0,100),cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
points(genes,devSTD2[,2],col="red", pch="o", cex=2)
# Adding a legend inside box at the location (2,40) in graph coordinates.
# Note that the order of plots are maintained in the vectors of attributes.
legend(1,70,legend=c("Varianza vecinos","std"), col=c("black","red"),pch=c("*","o"), cex=1.5,box.lty = 2)
text(80, 70, labels = "std = 3, kc=3, 90/100 genes", font=2, cex=1.5)
dev.off()
a = c(1,1,2)
a.append(3)
rbind(a,3)
genesRechazados = vector()
genesRechazados = vector()
for (i in genes){
if (devSTD2[,1][i] > devSTD2[,2][i]){
genesRechazados = c(genesRechazados,i)
}
}
genesRechazados 
matrixFinal = matrix(nrow = 0, ncol= length(t))
for (i in genes){
if (devSTD2[,1][i] < devSTD2[,2][i]){
matrixFinal = rbind(matrixFinal,expMatrix[i,])
}
}
library("limSolve") 
adjMatrix = adjMatrix + t(adjMatrix)
adjMatrixFinal = matrix(nrow = 0, ncol= length(t))
for (i in genes){
if (devSTD2[,1][i] < devSTD2[,2][i]){
adjMatrixFinal = rbind(adjMatrixFinal,adjMatrix[i,])
}
}
adjMatrixFinal 
adjMatrix
adjMatrixFinal = matrix(nrow = 0, ncol= length(genes))
for (i in t){
if (devSTD2[,1][i] < devSTD2[,2][i]){
adjMatrixFinal = rbind(adjMatrixFinal,adjMatrix[i,])
}
}
matrixFinal 
samples = matrix(nrow = length(t), ncol = length(t)) #uso que es simetrica
for (i in seq(1,length(t),1)){
  for (j in seq(1,length(t),1)){
    samples[i,j] = samples[j,i] = distEuclideana(matrixFinal[,i],matrixFinal[,j])
  }
}
matrizRangos = t(apply(samples,1,rank))
adjMatrix = adyacencia(matrizRangos,4) 
diag = matrix(nrow = length(t), ncol = length(t))
for (i in seq(1,length(adjMatrix[1,]),1)){
for (j in seq(1,length(adjMatrix[1,]),1)){
if (i==j){
diag[i,i] = 1
}
if (i != j) {
diag[i,j] = 0
}
}
}
adjMatrixNoSelf = adjMatrix - diag
adjMatrix = adjMatrixNoSelf 
adjMatrix = adjMatrix + t(adjMatrix)
adjMatrix 
samples = matrix(nrow = length(t), ncol = length(t)) #uso que es simetrica
for (i in seq(1,length(t),1)){
  for (j in seq(1,length(t),1)){
    samples[i,j] = samples[j,i] = distEuclideana(matrixFinal[,i],matrixFinal[,j])
  }
}
matrizRangos = t(apply(samples,1,rank))
adjMatrix = adyacencia(matrizRangos,4)
grafo = graph_from_adjacency_matrix(adjMatrix, mode = c("undirected"), weighted = NULL, diag = FALSE,
  add.colnames = NULL, add.rownames = NA)
#simplify(grafo, remove.multiple = F, remove.loops = T)
#plot(grafo)
#l = layout_on_sphere(grafo) 
png(filename="GrafoConShuffleStd3k3Quitado.png")
    units="in", 
    width=10, 
    height=8, 
    pointsize=12, 
    res=72)
plot(grafo, layout = layout_on_sphere(grafo), edge.color = "black", edge.arrow.size=2, edge.width = 2, edge.arrow.width = 2, edge.lty = 1, vertex.size = 10)
text(1, 1, labels = "std = 3, k=3",font=2, cex=1.5)
dev.off()
is_connected(grafo)
diag = matrix(nrow = length(t), ncol = length(t))
for (i in seq(1,length(adjMatrix[1,]),1)){
for (j in seq(1,length(adjMatrix[1,]),1)){
if (i==j){
diag[i,i] = 1
}
if (i != j) {
diag[i,j] = 0
}
}
}
adjMatrixNoSelf = adjMatrix - diag
adjMatrix = adjMatrixNoSelf 
adjMatrix = adjMatrix + t(adjMatrix)
adjMatrix = adjMatrix + t(adjMatrix)
A = matrix()
MatrixA = matrix(nrow=2,ncol=2)
MatrixA[,1] = c(1,2)
MatrixA[,2] = c(2,3)
MatrixB =rbind(MatrixA, c(5,6))
MatrixA
MatrixB 
MatrixA = matrix(nrow=2,ncol=2)
MatrixA = matrix(nrow=2,ncol=2)
MatrixA = matrix(nrow=2,ncol=2)
MatrixA[,1] = c(1,2)
MatrixA[,2] = c(2,3)
MatrixB =rbind(MatrixA, t(c(5,6)))
MatrixA
MatrixB 
MatrixB =cbind(MatrixA, c(5,6))
MatrixB 
E = rep(1, length(b))
E 
E = rep(1,length(matrixFinal[1,]))
f = 1
A = matrix()
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j]
}
}
}
A = matrix()
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
}
warnings()
i = 1
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
adjMatrix[1,]
matrixFinal[,2]
A = cbind(A,matrixFinal[,2])
A = cbind(A,c(1,2))
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
i = 1
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
A
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
}
i = 1
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
lsei(A, b, E, f)
E 
A
E = rep(1,length(matrixFinal[,1]))
lsei(A, b, E, f)
E = rep(1,length(matrixFinal[,1]))
E 
length(E)
A 
kc = 3
E = rep(1,kc)
lsei(A, b, E, f)
A 
b 
length(b)
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
lsei(A, b, E, f)
lsei(A, b, E, f)[1]
W = matrix(nrow = kc, ncol= 0)
w = lsei(A, b, E, f)[1]
W = cbind(W,w)
W
w
type(w)
w[1]
w[2]
typeof(w)
listToArray = function(values){
for (i in 1:length(values)){
  vector[i] = values[i]
}
  }
listToArray(w)
listToArray = function(values){
vector = vector()
for (i in 1:length(values)){
  vector[i] = values[i]
}
  }
listToArray(w)
a =listToArray(w)
a 
array(as.numeric(unlist(w)), dim=1)
w
array(as.numeric(unlist(w)), dim=3)
i = 1
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
w = array(as.numeric(unlist(lsei(A, b, E, f)[1])), dim=kc)
W = cbind(W,w)
kc = 3
E = rep(1,kc)
f = 1
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
W = matrix(nrow = kc, ncol= 0)
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
lsei(A, b, E, f)
i = 1
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
kc = 3
E = rep(1,kc)
f = 1
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
W = matrix(nrow = kc, ncol= 0)
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
lsei(A, b, E, f)
w = array(as.numeric(unlist(lsei(A, b, E, f)[1])), dim=kc)
W = cbind(W,w)
W 
kc = 3
E = rep(1,kc)
f = 1
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
W = matrix(nrow = kc, ncol= 0)
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
lsei(A, b, E, f)
w = array(as.numeric(unlist(lsei(A, b, E, f)[1])), dim=kc)
W = cbind(W,w)
}
kc = 3
E = rep(1,kc)
f = 1
W = matrix(nrow = kc, ncol= 0)
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
lsei(A, b, E, f)
w = array(as.numeric(unlist(lsei(A, b, E, f)[1])), dim=kc)
W = cbind(W,w)
}
i = 2
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
lsei(A, b, E, f)
i = 3
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
lsei(A, b, E, f)
W = matrix(nrow = kc, ncol= 0)
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
W = cbind(W,w)
}
adjMatrix
adjMatrix = adyacencia(matrizRangos,4)
grafo = graph_from_adjacency_matrix(adjMatrix, mode = c("undirected"), weighted = NULL, diag = FALSE,
  add.colnames = NULL, add.rownames = NA)
#simplify(grafo, remove.multiple = F, remove.loops = T)
#plot(grafo)
#l = layout_on_sphere(grafo) 
png(filename="GrafoConShuffleStd3k3Quitado.png")
    units="in", 
    width=10, 
    height=8, 
    pointsize=12, 
    res=72)
plot(grafo, layout = layout_on_sphere(grafo), edge.color = "black", edge.arrow.size=2, edge.width = 2, edge.arrow.width = 2, edge.lty = 1, vertex.size = 10)
text(1, 1, labels = "std = 3, k=3",font=2, cex=1.5)
dev.off()
is_connected(grafo)
#le saco la diagonal 
diag = matrix(nrow = length(t), ncol = length(t))
for (i in seq(1,length(adjMatrix[1,]),1)){
for (j in seq(1,length(adjMatrix[1,]),1)){
if (i==j){
diag[i,i] = 1
}
if (i != j) {
diag[i,j] = 0
}
}
}
adjMatrixNoSelf = adjMatrix - diag
adjMatrix = adjMatrixNoSelf 
adjMatrix
kc = 3
E = rep(1,kc)
f = 1
W = matrix(nrow = kc, ncol= 0)
for (i in seq(1 , length(matrixFinal[1,]) , 1)){
A = matrix(nrow = length(matrixFinal[,1]), ncol= 0)
b = matrixFinal[,i]
for (j in seq(1 , length(expMatrix[1,]) , 1)){
s  = adjMatrix[i,][j]
if (s != 0){ # o sea que es mi vecino
A = cbind(A,matrixFinal[,j])
}
}
ww = lsei(A, b, E, f)
w = array(as.numeric(unlist(ww[1])), dim=kc)
W = cbind(W,w)
}
W 
W
W
W
W[1,]
length(W[1,])
length(W[,1])
q()
